Ok bro, ekdum crisp summary ðŸ‘‡

### ðŸ”¥ Sorting Algorithms in Short

1. **Bubble Sort** â†’ Swap neighbors again & again, big ones bubble to end.

   * Time: O(nÂ²)
   * Easy but slow.

2. **Selection Sort** â†’ Pick smallest and place at front.

   * Time: O(nÂ²)
   * Less swapping but still slow.

3. **Insertion Sort** â†’ Insert each element in its right place (like arranging cards).

   * Time: O(nÂ²), but good for small/almost sorted arrays.

4. **Merge Sort** â†’ Divide array in half, sort, then merge.

   * Time: O(n log n)
   * Very stable and reliable.

5. **Quick Sort** â†’ Choose pivot, partition into smaller/bigger, recurse.

   * Time: O(n log n) average, O(nÂ²) worst-case
   * Very fast in practice.

ðŸ‘‰ Extra:

* **Heap Sort** â†’ Use heap (tree structure), extract max/min one by one.
* **Counting/Radix/Bucket Sort** â†’ For integers / special cases â†’ can be faster than O(n log n).

âš¡ TL;DR:

* Small/easy â†’ Insertion
* Big & general â†’ Merge or Quick
* Special (numbers only) â†’ Counting/Radix

Want me to also make a **chart/table comparing all sorts** so you can revise in 10 sec before exam?
